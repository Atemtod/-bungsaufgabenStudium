package uiobjects;

import data.Provider;
import main.CanvasArea;
import processing.core.PApplet;
import util.ScaledValuesBuffer;

import java.util.ArrayList;

public class Plot implements Drawable {

    /**
     * References the data source for this plot.
     */
    final private Provider provider;

    /**
     * Buffer of actual values, as generated by the provider.
     */
    private ArrayList<Float> realValues = new ArrayList<>();

    /**
     * Buffer of values scaled to the dimensions of the screen area for this component.
     */
    private ScaledValuesBuffer screenValues = new ScaledValuesBuffer();

    private float x0 = (float) 0.0;

    /**
     * Constructor.
     * @param provider is the data source for the plot component.
     */
    public Plot(Provider provider) {
        this.provider = provider;
    }

    @Override
    public void setDrawableArea(CanvasArea target) {
        screenValues.setScaledRange(target.getOrigin().getY(), target.getHeight());
        screenValues.resize(target.getWidth());
        x0 = target.getOrigin().getX();
    }

    @Override
    public void draw(PApplet canvas) {
        if (!provider.hasData()) {
            realValues.add(realValues.get(realValues.size()-1));
        }
        else {
            realValues.add(provider.nextDataPoint());
        }

        screenValues.addPoint(realValues.get(realValues.size()-1));

        float x = x0;

        canvas.noFill();
        canvas.beginShape();

        for (float point: screenValues.getBuffer()) {
            canvas.curveVertex(x++, point);
        }

        canvas.endShape();
    }
}
